import React from 'react';
import { useTranslation } from 'react-i18next';
// Import MUI Components
import { Container, Box, Link as MUILink } from '@material-ui/core';
import { makeStyles, createStyles } from '@material-ui/styles';

/**
 * CreateStyles allows us to style MUI components
 * This @var is passed as a paramater in the export of the component
 * @see https://material-ui.com/styles/basics/
 */
const useStyles = makeStyles(() =>
  createStyles({
    avatar: {
      backgroundColor: 'inherit',
      color: '#2F2D2E',
      margin: 'auto',
    },
    image: {
      height: '100%',
      width: '100%',
    },
  }),
);

/**
 * About page (@todo)
 */
const About = () => {
  const [t] = useTranslation();
  const classes = useStyles();

  return (
    <Container component="main" maxWidth="md">
      {/** @todo - Time permitted, move descriptions to locale */}
      <Box mt={4}>
        <h3>
          Picsum Vision is an Image Repository built to expirement with graph-based searching functionalities. Images are generated via{' '}
          <a href="https://picsum.photos/">Lorem Picsum</a>, metadata is populated by{' '}
          <a href="https://cloud.google.com/vision">Google Vision</a> & <a href="http://www.datamuse.com/api/">Datamuse</a>, and data
          relationships are stored in <a href="https://www.arangodb.com/">ArangoDB</a>.
        </h3>
      </Box>
      <Box mt={3}>
        <h4>Features</h4>
        <div>
          <b>Query</b>: Search Lorem Picsum images by labels or by 1 URL in the text bar
        </div>
        <div>
          <b>Surprise Me</b>: Search for images with labels generated by Picsum Vision
        </div>
        <div>
          <b>Discover</b>: View images similar to the images you have previously viewed (i.e clicked on)
        </div>
        <div>
          <b>Visualize</b>: Turn your last search results into a graph network to visualize image relationships
        </div>
        <div>
          <b>Interact</b>: Click on an image to see its labels, its best guess, and its visually similar images
        </div>
        <div>
          <b>History</b>: Review & playback your searches, image clicks, and favourites
        </div>
      </Box>
      <Box mt={3}>
        <h4>How it works</h4>
        <div>
          <b>DB Architecture:</b> Images, Labels, Best Guesses & Authors have their own vertices.{' '}
        </div>
        <div>They are connected via ranked edges. Graph traversal is now accessible via a spiderweb of sub-graphs.</div>
        <br></br>
        <div>
          <b>Query</b>: Combine <a href="https://www.arangodb.com/community-server/arangosearch/">ArangoSearch</a> and the{' '}
          <a href="https://en.wikipedia.org/wiki/Okapi_BM25">Okapi BM25</a> ranking function with standard graph traversals
        </div>
        <div>
          <b>Surprise Me</b> Pick a random image, branch out to its labels, and perform a 1-step graph traversal for each
        </div>
        <div>
          <b>Discover</b>: Find the images clicked on & perform a 2-step graph traversal while prioritizing higher edge ranks
        </div>
        <div>
          <b>Visualize</b>: Perform a regular Query, but collect all related vertices & edges (instead of just image vertices)
        </div>
        <div>
          <b>Interact</b>: Perform 1-step graph traversal for associated labels, and 2-step graph traversal for similar images
        </div>
        <div>
          <b>History</b>: Use client-side caching (i.e local storage) to keep track of user clicks, searches & favourites
        </div>
      </Box>
      <Box>
        <img alt="Picsum Vision stack" src='/stack.png' style={{ height: '100%', width: '100%' }}></img>
      </Box>
      <Box mt={3}>
        <h4>More documentation... coming soon</h4>
      </Box>
      <Box mt={4}>
        <p>
          <MUILink color="inherit" href="https://mahanna.dev/">
            aMahanna
          </MUILink>
          {' Â© ' + new Date().getFullYear()}
        </p>
      </Box>
    </Container>
  );
};
export default About;
